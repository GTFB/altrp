// handlers.ts
//import { TelegramBotWorker } from './bot';
import { TelegramBotWorker } from '../worker/bot';
import { UserContextManager } from '../core/user-context';
import { normalizeVKLink } from '../core/helpers';

export const createCustomHandlers = (worker: TelegramBotWorker) => {
  const handlerWorker = {
    d1Storage: worker['d1Storage'],
    flowEngine: worker['flowEngine'],
    env: worker['env'],
    messageService: worker['messageService'],
    topicService: worker['topicService']
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ flowEngine –¥–æ—Å—Ç—É–ø–µ–Ω
  if (!handlerWorker.flowEngine) {
    console.error('‚ùå flowEngine is not available in handlerWorker');
    throw new Error('flowEngine is not initialized');
  }
  
  return {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    registerUser: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üë§ Registering user ${telegramId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
      let existingUser = await handlerWorker.d1Storage.getUser(telegramId);
      
      if (!existingUser) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram (–±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç)
        const userInfo = await contextManager.getVariable(telegramId, '_system.currentMessage');
        
        if (userInfo && userInfo.from) {
          // –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫ –≤ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const topicId = await handlerWorker.topicService.createTopicInAdminGroup(telegramId, userInfo.from);
          
          // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const newUser = {
            telegramId: telegramId,
            firstName: userInfo.from.first_name,
            lastName: userInfo.from.last_name || '',
            username: userInfo.from.username || '',
            registeredAt: new Date().toISOString(),
            topicId: topicId || 0
          };

          await handlerWorker.d1Storage.addUser(newUser);
          console.log(`‚úÖ New user ${telegramId} registered via flow`);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
          await contextManager.setVariable(telegramId, 'registration.isNewUser', true);
          await contextManager.setVariable(telegramId, 'registration.topicId', topicId);
        }
      } else {
        console.log(`üë§ User ${telegramId} already exists`);
        await contextManager.setVariable(telegramId, 'registration.isNewUser', false);
      }
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    processSubscriptionCheck: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üìã Processing subscription check for user ${telegramId}`);
      
      const vkLink = await contextManager.getVariable(telegramId, 'subscription.vk_link');
      if (vkLink) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º VK —Å—Å—ã–ª–∫—É (–¥–æ–±–∞–≤–ª—è–µ–º https://vk.com/ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        const normalizedVkLink = normalizeVKLink(vkLink);
        console.log(`üìù VK link normalized: "${vkLink}" ‚Üí "${normalizedVkLink}"`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é VK —Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const user = await handlerWorker.d1Storage.getUser(telegramId);
        if (user) {
          const userData = user.data ? JSON.parse(user.data) : {};
          userData.vk = normalizedVkLink;
          await handlerWorker.d1Storage.updateUserData(telegramId, JSON.stringify(userData));
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ç–æ–ø–∏–∫
          if (user.topicId) {
            const currentDateTime = new Date().toLocaleString('ru-RU', {
              timeZone: 'Europe/Moscow',
              year: 'numeric',
              month: '2-digit',
              day: '2-digit',
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit'
            });

            const topicMessage = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö

ID: ${telegramId}
Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ò–º—è: ${user.firstName || ''} ${user.lastName || ''}`.trim() + `
VK: ${normalizedVkLink}

–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${currentDateTime}`;

            const adminChatId = parseInt(handlerWorker.env.ADMIN_CHAT_ID);
            await handlerWorker.messageService.sendMessageToTopic(adminChatId, user.topicId, topicMessage);
          }
        }
      }
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞
    processConsultationRequest: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üìã Processing consultation for user ${telegramId}`);
      
      const consultationType = await contextManager.getVariable(telegramId, 'consultation.type');
      if (consultationType) {
        const user = await handlerWorker.d1Storage.getUser(telegramId);
        if (user) {
          const userData = user.data ? JSON.parse(user.data) : {};
          await handlerWorker.d1Storage.updateUserData(telegramId, JSON.stringify(userData));
          
          if (user.topicId) {
            const currentDateTime = new Date().toLocaleString('ru-RU', {
              timeZone: 'Europe/Moscow',
              year: 'numeric',
              month: '2-digit',
              day: '2-digit',
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit'
            });

            const consultationRequest = await contextManager.getVariable(telegramId, 'consultation.request');

            const topicMessage = `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–æ—â—å ${consultationType === 'lawyer' ? '—é—Ä–∏—Å—Ç–∞' : '–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞'}

ID: ${telegramId}
Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ò–º—è: ${user.firstName || ''} ${user.lastName || ''}`.trim() + `

–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${currentDateTime}

–í–æ–ø—Ä–æ—Å: ${consultationRequest}
`;

            const adminChatId = parseInt(handlerWorker.env.ADMIN_CHAT_ID);
            await handlerWorker.messageService.sendMessageToTopic(adminChatId, user.topicId, topicMessage);
          }
        }
      }
    },

    // –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ PIB
    searchingCompanyByPib: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üîç Searching company by PIB for user ${telegramId}`);

      try {
        const clientPib = await contextManager.getVariable(telegramId, 'client.pib');
        
        if (!clientPib) {
          console.warn(`‚ö†Ô∏è No PIB found for user ${telegramId}`);
          await handlerWorker.flowEngine.goToStep(telegramId, 'ask_to_client_account');
          return;
        }

        const result = await handlerWorker.d1Storage.executeQuery(
          'SELECT * FROM companies WHERE pib = ? ORDER BY id LIMIT 1', 
          [clientPib]
        );

        if (result.results.length > 0) {
          const company = result.results[0];
          console.log(`‚úÖ Company found for PIB ${clientPib}: ${company.name}`);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
          await contextManager.setVariable(telegramId, 'client', {
            id: company.id,
            name: company.name,
            pib: company.pib,
            account_number: company.account_number,
            address: company.address,
          });

          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∫–∞–∑—É –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
        } else {
          console.log(`‚ùå No company found for PIB ${clientPib}`);
          await handlerWorker.flowEngine.goToStep(telegramId, 'ask_to_client_account');
        }
      } catch (error) {
        console.error(`‚ùå Error searching company by PIB for user ${telegramId}:`, error);
        await handlerWorker.flowEngine.goToStep(telegramId, 'ask_to_client_pib');
      }
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–∑—ã–∫–∞ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    checkLanguageAndRoute: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üîç Checking language for user ${telegramId}`);
      
      const user = await handlerWorker.d1Storage.getUser(telegramId);
      
      if (user?.language) {
        // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —è–∑—ã–∫ - —Å—Ä–∞–∑—É –≤ onboarding
        console.log(`‚úÖ User ${telegramId} has language: ${user.language}, going to onboarding`);
        await handlerWorker.flowEngine.startFlow(telegramId, 'onboarding');
      } else {
        // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —è–∑—ã–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        console.log(`‚ùå User ${telegramId} has no language, showing language selection`);
        await handlerWorker.flowEngine.goToStep(telegramId, 'send_lang');
      }
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    saveLang: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üåç Saving language for user ${telegramId}`);

      const language = await contextManager.getVariable(telegramId, 'profile.language');
      if (language) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –ë–î —á–µ—Ä–µ–∑ D1StorageService
        await handlerWorker.d1Storage.updateUser(telegramId, { language });
        console.log(`‚úÖ Language ${language} saved for user ${telegramId}`);
      } else {
        console.warn(`‚ö†Ô∏è No language found in context for user ${telegramId}`);
      }
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    checkUserCompany: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üîç Checking if user ${telegramId} has company`);

      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const user = await handlerWorker.d1Storage.getUser(telegramId);
        if (!user || !user.id) {
          console.error(`‚ùå User ${telegramId} not found in database`);
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
          await handlerWorker.flowEngine.goToStep(telegramId, 'send_welcome');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ company_users –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const result = await handlerWorker.d1Storage.executeQuery(
          'SELECT COUNT(*) as count FROM company_users WHERE user_id = ?',
          [user.id]
        );

        const hasCompany = result.results[0].count > 0;

        if (hasCompany) {
          console.log(`‚úÖ User ${telegramId} has company, completing onboarding`);
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –∫–æ–º–ø–∞–Ω–∏—é, –∑–∞–≤–µ—Ä—à–∞–µ–º onboarding –∏ –≤—ã—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          //await this.flowEngine.completeFlow(telegramId);
          await handlerWorker.flowEngine.startFlow(telegramId, 'menu');
        } else {
          console.log(`‚ùå User ${telegramId} has no company, going to onboarding`);
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é
          await handlerWorker.flowEngine.goToStep(telegramId, 'send_welcome');
        }

      } catch (error) {
        console.error(`‚ùå Error checking user company for ${telegramId}:`, error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        await handlerWorker.flowEngine.goToStep(telegramId, 'send_welcome');
      }
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≥–ª–∞–≤–Ω–æ–π —É—Å–ª—É–≥–∏
    createCompanyAndMainService: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üÜï Creating company and main service for user ${telegramId}`);

      const companyData = await contextManager.getVariable(telegramId, 'company') || {};
      if (companyData && companyData.name && companyData.pib && companyData.okved && companyData.phone && companyData.email) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const user = await handlerWorker.d1Storage.getUser(telegramId);
          if (!user || !user.id) {
            console.error(`‚ùå User ${telegramId} not found in database`);
            return;
          }

          // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë ID
          const companyResult = await handlerWorker.d1Storage.executeQuery(
            'INSERT INTO companies (name, pib, okved, phone, email) VALUES (?, ?, ?, ?, ?)',
            [companyData.name, companyData.pib, companyData.okved, companyData.phone, companyData.email]
          );

          const companyId = companyResult.meta.last_row_id;
          console.log(`‚úÖ Company created with ID ${companyId} for user ${telegramId}`);

          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ company_users
          await handlerWorker.d1Storage.executeQuery(
            'INSERT INTO company_users (user_id, company_id) VALUES (?, ?)',
            [user.id, companyId]
          );

          console.log(`‚úÖ Company-user relationship created for user ${telegramId} and company ${companyId}`);

          const serviceData = await contextManager.getVariable(telegramId, 'mainService') || {};
          if (serviceData && serviceData.name) {
            try {
              // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë ID
              await handlerWorker.d1Storage.executeQuery(
                'INSERT INTO services (name, description, company_id) VALUES (?, ?, ?)',
                [serviceData.name, 'main', companyId]
              );

              console.log(`‚úÖ Main service created for user ${telegramId}`);

              const topicMessage = `üë§ –ü—Ä–æ—Ñ–∏–ª—å:

–Ø–∑—ã–∫: ${user.language || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–ù–∞–∑–≤–∞–Ω–∏–µ: ${companyData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
PIB: ${companyData.pib || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–û–ö–í–≠–î: ${companyData.okved || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–£—Å–ª—É–≥–∞: ${serviceData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`;

              const adminChatId = parseInt(handlerWorker.env.ADMIN_CHAT_ID);
              if (user.topicId) {
                await handlerWorker.messageService.sendMessageToTopic(adminChatId, user.topicId, topicMessage);
              }

            } catch (error) {
              console.error(`‚ùå Error creating Main service for user ${telegramId}:`, error);
            }
          } else {
            console.warn(`‚ö†Ô∏è Missing Main service data for user ${telegramId}`);
          }

        } catch (error) {
          console.error(`‚ùå Error creating company for user ${telegramId}:`, error);
        }
      } else {
        console.warn(`‚ö†Ô∏è Missing company data for user ${telegramId}`);
      }

    },

    updateCompany: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üÜï Updating company for user ${telegramId}`);
    
      const companyData = await contextManager.getVariable(telegramId, 'company') || {};
      if (companyData && (companyData.name || companyData.pib || companyData.okved)) {
        try {
          const user = await handlerWorker.d1Storage.getUser(telegramId);
          if (!user || !user.id) {
            console.error(`‚ùå User ${telegramId} not found in database`);
            await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
            return;
          }
    
          const companyUserResult = await handlerWorker.d1Storage.executeQuery(
            'SELECT * FROM company_users WHERE user_id = ? ORDER BY id LIMIT 1',
            [user.id]
          );
    
          if (!companyUserResult.results.length) {
            console.warn(`‚ö†Ô∏è No company found for user ${telegramId}`);
            await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
            return;
          }
    
          const companyId = companyUserResult.results[0].company_id;
    
          await handlerWorker.d1Storage.executeQuery(
            'UPDATE companies SET name = ?, pib = ?, okved = ? WHERE id = ?',
            [companyData.name, companyData.pib, companyData.okved, companyId]
          );
    
          console.log(`‚úÖ Company updated with ID ${companyId} for user ${telegramId}`);
    
        } catch (error) {
          console.error(`‚ùå Error updating company for user ${telegramId}:`, error);
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
        }
      } else {
        console.warn(`‚ö†Ô∏è Missing company data for user ${telegramId}`);
        await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
      }
    },

    saveClientCompany: async (telegramId: number, contextManager: UserContextManager) => {
      //const company = await contextManager.getVariable(telegramId, 'client.company');

      const company = await contextManager.getVariable(telegramId, 'client') || {};

      await handlerWorker.d1Storage.executeQuery(
        'INSERT INTO companies (name, pib, account_number, address) VALUES (?, ?, ?, ?)',
        [company.name, company.pib, company.account_number, company.address]
      );
    },

    generateClientCard: async (telegramId: number, contextManager: UserContextManager) => {
      //const company = await contextManager.getVariable(telegramId, 'client.company');

      const company = await contextManager.getVariable(telegramId, 'client') || {};

      await contextManager.setVariable(telegramId, 'invoice.customer_id', company.id);
      await contextManager.setVariable(telegramId, 'invoice.customer_name', company.name);
      await contextManager.setVariable(telegramId, 'invoice.customer_pib', company.pib);
      await contextManager.setVariable(telegramId, 'invoice.customer_account_number', company.account_number);
      await contextManager.setVariable(telegramId, 'invoice.customer_address', company.address);

      return `üìã –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:

    –ù–∞–∑–≤–∞–Ω–∏–µ: ${company.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
    PIB: ${company.pib || '–ù–µ —É–∫–∞–∑–∞–Ω'}
    –†/–°: ${company.account_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}
    –ê–¥—Ä–µ—Å: ${company.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}

    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    },

    generateServiceCard: async (telegramId: number, contextManager: UserContextManager) => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const user = await handlerWorker.d1Storage.getUser(telegramId);
        if (!user || !user.id) {
          console.error(`‚ùå User ${telegramId} not found in database`);
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
          return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ company_users –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const companyResult = await handlerWorker.d1Storage.executeQuery(
          'SELECT * FROM company_users WHERE user_id = ? ORDER BY id LIMIT 1',
          [user.id]
        );

        const company = companyResult.results[0];

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏
        const result = await handlerWorker.d1Storage.executeQuery(
          'SELECT * FROM services WHERE company_id = ? AND description = ? ORDER BY id LIMIT 1',
          [company.company_id, 'main']
        );

        if (result.results.length > 0) {
          const service = result.results[0];
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
          await contextManager.setVariable(telegramId, 'mainService', service);

          await contextManager.setVariable(telegramId, 'invoice.service_id', service.id);
          await contextManager.setVariable(telegramId, 'invoice.service_name', service.name);

          return `üìã –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ª—É–≥–∏:

    –ù–∞–∑–≤–∞–Ω–∏–µ: ${service.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        } else {
          console.warn(`‚ö†Ô∏è No services found for company ${company.id}`);
          return '–£—Å–ª—É–≥–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
        }
      } catch (error) {
        console.error(`‚ùå Error generating service card for user ${telegramId}:`, error);
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ.';
      }
    },

    createMainService: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üÜï Creating company and main service for user ${telegramId}`);

      const serviceData = await contextManager.getVariable(telegramId, 'mainService') || {};
      if (serviceData && serviceData.name) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const user = await handlerWorker.d1Storage.getUser(telegramId);
          if (!user || !user.id) {
            console.error(`‚ùå User ${telegramId} not found in database`);
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
            await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ company_users –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const companyResult = await handlerWorker.d1Storage.executeQuery(
            'SELECT * FROM company_users WHERE user_id = ? ORDER BY id LIMIT 1',
            [user.id]
          );

          const company = companyResult.results[0];

      
          // –æ–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª—É–≥—É
          await handlerWorker.d1Storage.executeQuery(
            'UPDATE services SET description = ? WHERE company_id = ?',
            ['', company.company_id]
          );

          await handlerWorker.d1Storage.executeQuery(
            'INSERT INTO services (name, description, company_id) VALUES (?, ?, ?)',
            [serviceData.name, 'main', company.company_id]
          );

          console.log(`‚úÖ Main service created for user ${telegramId}`);

        } catch (error) {
          console.error(`‚ùå Error creating Main service for user ${telegramId}:`, error);
        }
      } else {
        console.warn(`‚ö†Ô∏è Missing service data for user ${telegramId}`);
      }
    },

    
    updateMainService: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üîÑ Updating main service for user ${telegramId}`);

      try {
        const serviceData = await contextManager.getVariable(telegramId, 'mainService') || {};
        
        if (!serviceData || !serviceData.name) {
          console.warn(`‚ö†Ô∏è Missing service data for user ${telegramId}`);
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const user = await handlerWorker.d1Storage.getUser(telegramId);
        if (!user || !user.id) {
          console.error(`‚ùå User ${telegramId} not found in database`);
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ company_users –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const companyUserResult = await handlerWorker.d1Storage.executeQuery(
          'SELECT * FROM company_users WHERE user_id = ? ORDER BY id LIMIT 1',
          [user.id]
        );

        if (!companyUserResult.results.length) {
          console.warn(`‚ö†Ô∏è No company found for user ${telegramId}`);
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
          return;
        }

        const companyId = companyUserResult.results[0].company_id;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —É—Å–ª—É–≥—É –∫–æ–º–ø–∞–Ω–∏–∏
        const updateResult = await handlerWorker.d1Storage.executeQuery(
          'UPDATE services SET name = ? WHERE company_id = ? AND description = ? ORDER BY id LIMIT 1',
          [serviceData.name, companyId, 'main']
        );

        console.log(`‚úÖ Main service updated for company ${companyId}, changes: ${updateResult.meta.changes}`);
        
      } catch (error) {
        console.error(`‚ùå Error updating service for user ${telegramId}:`, error);
      }
    },

    showInvoice: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üÜï Lookup invoice for user ${telegramId}`);

      const invoiceData = await contextManager.getVariable(telegramId, 'invoice') || {};
      if (invoiceData && invoiceData.customer_id && invoiceData.service_id && invoiceData.amount) {
        try {

          return `üìã –î–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞:

    –ö–ª–∏–µ–Ω—Ç: ${invoiceData.customer_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
    PIB: ${invoiceData.customer_pib || '–ù–µ —É–∫–∞–∑–∞–Ω'}
    –†/–°: ${invoiceData.customer_account_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}
    –ê–¥—Ä–µ—Å: ${invoiceData.customer_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}

    –£—Å–ª—É–≥–∞: ${invoiceData.service_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
    –°—É–º–º–∞: ${invoiceData.amount || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        } catch (error) {
          console.error(`‚ùå Error getting invoice for user ${telegramId}:`, error);
          return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞.';
        }
      } else {
        console.warn(`‚ö†Ô∏è Missing invoice data for user ${telegramId}`);
        return '–î–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      }

    },

    getPayments: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üÜï Lookup payments for user ${telegramId}`);

      try {
        const user = await handlerWorker.d1Storage.getUser(telegramId);
        if (!user || !user.id) {
          console.error(`‚ùå User ${telegramId} not found in database`);
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
          return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ company_users –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const companyResult = await handlerWorker.d1Storage.executeQuery(
          'SELECT * FROM company_users WHERE user_id = ? ORDER BY id LIMIT 1',
          [user.id]
        );

        if (!companyResult.results.length) {
          console.warn(`‚ö†Ô∏è No company found for user ${telegramId}`);
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
          return '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
        }

        const companyId = companyResult.results[0].company_id;

        const paymentResult = await handlerWorker.d1Storage.executeQuery(
          'SELECT * FROM payments WHERE company_id = ? ORDER BY created_at DESC',
          [companyId]
        );

        let text = `üìã –ü–ª–∞—Ç–µ–∂–∏:\n\n`;
        let i = 1;
        if (paymentResult.results.length === 0) {
          text += '–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.';
        } else {
          for (const p of paymentResult.results) {
            text += `${i}. ${p.amount} RSD - ${new Date(p.created_at).toLocaleDateString('ru-RU')}\n`;
            text += `–°—Ç–∞—Ç—É—Å: ${p.status}\n\n`;

            i++;
          }
        }

        return text;

      } catch (error) {
        console.error(`‚ùå Error getting payments for user ${telegramId}:`, error);
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π';
      }
    },

    getExpenses: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üÜï Lookup expenses for user ${telegramId}`);

      try {
        const user = await handlerWorker.d1Storage.getUser(telegramId);
        if (!user || !user.id) {
          console.error(`‚ùå User ${telegramId} not found in database`);
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
          return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ company_users –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const companyResult = await handlerWorker.d1Storage.executeQuery(
          'SELECT * FROM company_users WHERE user_id = ? ORDER BY id LIMIT 1',
          [user.id]
        );

        if (!companyResult.results.length) {
          console.warn(`‚ö†Ô∏è No company found for user ${telegramId}`);
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
          return '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
        }

        const companyId = companyResult.results[0].company_id;

        const expenseResult = await handlerWorker.d1Storage.executeQuery(
          'SELECT * FROM expenses WHERE company_id = ? ORDER BY created_at DESC',
          [companyId]
        );

        let text = `üìã –†–∞—Å—Ö–æ–¥—ã:\n\n`;

        let i = 1;
        if (expenseResult.results.length === 0) {
          text += '–†–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.';
        } else {
          for (const e of expenseResult.results) {
            text += `${i}. ${e.amount} RSD - ${new Date(e.created_at).toLocaleDateString('ru-RU')}\n`;
            text += `–û–ø–∏—Å–∞–Ω–∏–µ: ${e.description}\n\n`;

            i++;
          }
        }

        return text;

      } catch (error) {
        console.error(`‚ùå Error getting expenses for user ${telegramId}:`, error);
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤';
      }
    },
    
    createExpense: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üÜï Creating expense for user ${telegramId}`);

      const expenseData = await contextManager.getVariable(telegramId, 'expense') || {};
      if (expenseData && expenseData.amount) {
        try {
          const user = await handlerWorker.d1Storage.getUser(telegramId);
          if (!user || !user.id) {
            console.error(`‚ùå User ${telegramId} not found in database`);
            await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ company_users –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const companyResult = await handlerWorker.d1Storage.executeQuery(
            'SELECT * FROM company_users WHERE user_id = ? ORDER BY id LIMIT 1',
            [user.id]
          );

          if (!companyResult.results.length) {
            console.warn(`‚ö†Ô∏è No company found for user ${telegramId}`);
            await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
            return;
          }

          const companyId = companyResult.results[0].company_id;

          // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
          const expenseResult = await handlerWorker.d1Storage.executeQuery(
            'INSERT INTO expenses (company_id, amount, description) VALUES (?, ?, ?)',
            [companyId, expenseData.amount, expenseData.description || null]
          );

          const expenseId = expenseResult.meta.last_row_id;
          console.log(`‚úÖ Expense created for user ${telegramId}`);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
          await contextManager.setVariable(telegramId, 'expense.id', expenseId);

        } catch (error) {
          console.error(`‚ùå Error creating expense for user ${telegramId}:`, error);
          await handlerWorker.flowEngine.goToStep(telegramId, 'handle_get_expenses');
        }
      } else {
        console.warn(`‚ö†Ô∏è Missing expense data for user ${telegramId}`);
        await handlerWorker.flowEngine.goToStep(telegramId, 'handle_get_expenses');
      }
    },

    createInvoice: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üÜï Creating invoice for user ${telegramId}`);

      const invoiceData = await contextManager.getVariable(telegramId, 'invoice') || {};
      if (invoiceData && invoiceData.customer_id && invoiceData.service_id && invoiceData.amount) {
        try {
          const user = await handlerWorker.d1Storage.getUser(telegramId);
          if (!user || !user.id) {
            console.error(`‚ùå User ${telegramId} not found in database`);
            await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ company_users –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const companyResult = await handlerWorker.d1Storage.executeQuery(
            'SELECT * FROM company_users WHERE user_id = ? ORDER BY id LIMIT 1',
            [user.id]
          );

          const company = companyResult.results[0];

          // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π (CURRENT_TIMESTAMP)
          const invoiceResult = await handlerWorker.d1Storage.executeQuery(
            'INSERT INTO invoices (company_id, amount, status, customer_id) VALUES (?, ?, ?, ?)',
            [company.company_id, invoiceData.amount, 'CREATED', invoiceData.customer_id]
          );

          const invoiceId = invoiceResult.meta.last_row_id;

          // –°–≤—è–∑—ã–≤–∞–µ–º —Å—á–µ—Ç —Å —É—Å–ª—É–≥–æ–π
          await handlerWorker.d1Storage.executeQuery(
            'INSERT INTO invoice_services (invoice_id, service_id) VALUES (?, ?)',
            [invoiceId, invoiceData.service_id]
          );

          console.log(`‚úÖ Invoice created for user ${telegramId}`);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
          await contextManager.setVariable(telegramId, 'invoice.id', invoiceId);
          
          // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
          //await this.flowEngine.goToStep(telegramId, 'show_invoice');

        } catch (error) {
          console.error(`‚ùå Error creating invoice for user ${telegramId}:`, error);
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
        }
      } else {
        console.warn(`‚ö†Ô∏è Missing invoice data for user ${telegramId}`);
        await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
      }
    },

    getTemplate: async (telegramId: number, contextManager: UserContextManager) => {
      console.log(`üìã User ${telegramId} requested contract template`);

      const user = await handlerWorker.d1Storage.getUser(telegramId);
      if (user) {
        const userData = user.data ? JSON.parse(user.data) : {};
        await handlerWorker.d1Storage.updateUserData(telegramId, JSON.stringify(userData));
        
        if (user.topicId) {
          const currentDateTime = new Date().toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });

          const templateRequest = await contextManager.getVariable(telegramId, 'need_template.type');

          const topicMessage = `–ó–∞–ø—Ä–æ—Å —à–∞–±–ª–æ–Ω–∞ ${templateRequest === 'contract' ? '–¥–æ–≥–æ–≤–æ—Ä–∞' : '–∞–∫—Ç–∞'}

ID: ${telegramId}
Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ò–º—è: ${user.firstName || ''} ${user.lastName || ''}`.trim() + `

–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${currentDateTime}
`;

          const adminChatId = parseInt(handlerWorker.env.ADMIN_CHAT_ID);
          await handlerWorker.messageService.sendMessageToTopic(adminChatId, user.topicId, topicMessage);
        }
      }
    },

    getProfile: async (telegramId: number, contextManager: UserContextManager) => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const user = await handlerWorker.d1Storage.getUser(telegramId);
        if (!user || !user.id) {
          console.error(`‚ùå User ${telegramId} not found in database`);
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
          await handlerWorker.flowEngine.goToStep(telegramId, 'show_client_card');
          return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ company_users –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const companyUserResult = await handlerWorker.d1Storage.executeQuery(
          'SELECT * FROM company_users WHERE user_id = ? ORDER BY id LIMIT 1',
          [user.id]
        );

        const companyId = companyUserResult.results[0].company_id;

        const companyResult = await handlerWorker.d1Storage.executeQuery(
          'SELECT * FROM companies WHERE id = ? ORDER BY id LIMIT 1',
          [companyId]
        );

        const company = companyResult.results[0];

        const serviceResult = await handlerWorker.d1Storage.executeQuery(
          'SELECT * FROM services WHERE company_id = ? AND description = ? ORDER BY id LIMIT 1',
          [companyId, 'main']
        );

        const service = serviceResult.results[0];

return `üë§ –ü—Ä–æ—Ñ–∏–ª—å:

–Ø–∑—ã–∫: ${user.language || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–ù–∞–∑–≤–∞–Ω–∏–µ: ${company.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
PIB: ${company.pib || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–û–ö–í–≠–î: ${company.okved || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–£—Å–ª—É–≥–∞: ${service.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        
      } catch (error) {
        console.error(`‚ùå Error generating profile for user ${telegramId}:`, error);
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.';
      }
    },

  };
};