// Node.js –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PostgreSQL –∏ Redis –≤–º–µ—Å—Ç–æ D1 –∏ KV
import { PostgreSQLStorageService, RedisStorageService } from './storage-service';
import { MessageService } from '../core/message-service';
import { TopicService } from '../core/topic-service';
import { SessionService } from '../core/session-service';
import { UserContextManager } from '../core/user-context';
import { FlowEngine } from '../core/flow-engine';
import { I18nService } from '../core/i18n';
import { isVKLink, normalizeVKLink } from '../core/helpers';
import { createCustomHandlers } from '../config/handlers';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è
export interface NodeEnv {
  BOT_TOKEN: string;
  ADMIN_CHAT_ID: string;
  TRANSCRIPTION_API_TOKEN: string;
  NODE_ENV: string;
  LOCALE: string;
  DATABASE_URL: string;
  REDIS_URL: string;
  PORT?: number;
}

export interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

export interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: TelegramChat;
  text?: string;
  voice?: TelegramVoice;
  photo?: TelegramPhoto[];
  document?: TelegramDocument;
  caption?: string;
  date: number;
}

export interface TelegramUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
}

export interface TelegramChat {
  id: number;
  type: string;
  title?: string;
}

export interface TelegramVoice {
  file_id: string;
  duration: number;
  mime_type?: string;
  file_size?: number;
}

export interface TelegramPhoto {
  file_id: string;
  file_unique_id: string;
  width: number;
  height: number;
  file_size?: number;
}

export interface TelegramDocument {
  file_id: string;
  file_unique_id: string;
  file_name?: string;
  mime_type?: string;
  file_size?: number;
}

export interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message?: TelegramMessage;
  data?: string;
}

export class TelegramBotNode {
  private env: NodeEnv;
  private redisStorage: RedisStorageService;
  private postgresStorage: PostgreSQLStorageService;
  private messageService: MessageService;
  private topicService: TopicService;
  private sessionService: SessionService;
  private userContextManager: UserContextManager;
  private flowEngine: FlowEngine;
  private i18nService: I18nService;

  constructor(env: NodeEnv, redisStorage: RedisStorageService, postgresStorage: PostgreSQLStorageService) {
    this.env = env;
    this.redisStorage = redisStorage;
    this.postgresStorage = postgresStorage;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å PostgreSQL –≤–º–µ—Å—Ç–æ D1
    this.messageService = new MessageService({
      botToken: env.BOT_TOKEN,
      d1Storage: this.postgresStorage as any // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º—É —Ç–∏–ø—É
    });
    
    this.topicService = new TopicService({
      botToken: env.BOT_TOKEN,
      adminChatId: parseInt(env.ADMIN_CHAT_ID),
      messageService: this.messageService
    });
    
    this.sessionService = new SessionService({
      d1Storage: this.postgresStorage as any // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º—É —Ç–∏–ø—É
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.userContextManager = new UserContextManager();
    this.userContextManager.setD1Storage(this.postgresStorage as any);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º i18n —Å–µ—Ä–≤–∏—Å
    this.i18nService = new I18nService(env.LOCALE);
    
    // –°–æ–∑–¥–∞–µ–º FlowEngine –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–Ω–∞—á–∞–ª–∞
    this.flowEngine = new FlowEngine(
      this.userContextManager,
      this.messageService,
      this.i18nService,
      {} // –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–∫–∞
    );
    
    // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ flowEngine
    // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TelegramBotWorker
    const workerAdapter = {
      d1Storage: this.postgresStorage,
      flowEngine: this.flowEngine,
      env: this.env,
      messageService: this.messageService,
      topicService: this.topicService
    };
    const customHandlers = createCustomHandlers(workerAdapter as any);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ FlowEngine
    this.flowEngine.setCustomHandlers(customHandlers);
    
    console.log('üöÄ TelegramBotNode initialized with PostgreSQL and Redis');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users –ø–æ Telegram ID
   */
  private async getDbUserId(telegramUserId: number): Promise<number | null> {
    try {
      const user = await this.postgresStorage.getUser(telegramUserId);
      return user && user.id ? user.id : null;
    } catch (error) {
      console.error(`Error getting DB user ID for Telegram user ${telegramUserId}:`, error);
      return null;
    }
  }

  async handleRequest(request: Request): Promise<Response> {
    try {
      console.log('üöÄ Bot request received');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
      if (request.method !== 'POST') {
        return new Response('Method not allowed', { status: 405 });
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
      const update = await request.json() as TelegramUpdate;
      console.log('üì® Received update:', JSON.stringify(update, null, 2));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
      console.log('üóÑÔ∏è PostgreSQL database connection:', this.postgresStorage ? 'OK' : 'FAILED');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PostgreSQL Storage (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã)
      await this.postgresStorage.initialize();

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await this.processUpdate(update);

      console.log('‚úÖ Update processed successfully');
      return new Response('OK', { status: 200 });
    } catch (error) {
      console.error('‚ùå Error handling request:', error);
      return new Response('Internal Server Error', { status: 500 });
    }
  }

  private async processUpdate(update: TelegramUpdate): Promise<void> {
    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      if (update.message) {
        await this.processMessage(update.message);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∑–∞–ø—Ä–æ—Å—ã
      if (update.callback_query) {
        await this.processCallbackQuery(update.callback_query);
      }
    } catch (error) {
      console.error('Error processing update:', error);
    }
  }

  private async processMessage(message: TelegramMessage): Promise<void> {
    const userId = message.from.id;
    const chatId = message.chat.id;
    const adminChatId = parseInt(this.env.ADMIN_CHAT_ID);

    console.log(`Processing message from user ${userId} in chat ${chatId}`);

    // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–≤ —Ç–æ–º —á–∏—Å–ª–µ –≤ —Ç–æ–ø–∏–∫–∞—Ö)
    if (message.text?.startsWith('/')) {
      await this.handleCommand(message);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—É (—Ç–æ–ø–∏–∫)
    if (chatId === adminChatId && (message as any).message_thread_id) {
      // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.topicService.handleMessageFromTopic(
        message, 
        this.postgresStorage.getUserIdByTopic.bind(this.postgresStorage),
        this.getDbUserId.bind(this)
      );
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await this.ensureUserExists(message.from);

    // –ü–æ–ª—É—á–∞–µ–º dbUserId –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const user = await this.postgresStorage.getUser(message.from.id);
    if (!user) {
      console.error(`User ${message.from.id} not found in database for logging`);
      return;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (user.id) {
      await this.messageService.logMessage(message, 'incoming', user.id);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.id) {
      await this.userContextManager.getOrCreateContext(message.from.id, user.id);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ñ–ª–æ—É
    const isInFlow = await this.userContextManager.isInFlowMode(message.from.id);
    
    if (isInFlow && message.text) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ñ–ª–æ—É - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ FlowEngine
      console.log(`üéØ User ${message.from.id} is in flow mode, processing through FlowEngine`);
      await this.flowEngine.handleIncomingMessage(message.from.id, message.text);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VK —Å—Å—ã–ª–∫—É (legacy –ª–æ–≥–∏–∫–∞)
    if (message.text) {
      const userData = user?.data ? JSON.parse(user.data) : {};
      if (userData.waitingForVK) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è VK —Å—Å—ã–ª–∫–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ VK —Å—Å—ã–ª–∫—É
        await this.handleVKLink(message.from.id, message.text);
        return;
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (—Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏)
    await this.handleAllMessages(message);
  }

  private async processCallbackQuery(callbackQuery: TelegramCallbackQuery): Promise<void> {
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    console.log(`Processing callback query from user ${userId}: ${data}`);

    // –ü–æ–ª—É—á–∞–µ–º dbUserId –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const user = await this.postgresStorage.getUser(callbackQuery.from.id);
    if (!user) {
      console.error(`User ${callbackQuery.from.id} not found in database for logging`);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query —á–µ—Ä–µ–∑ MessageService (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ + –æ—Ç–≤–µ—Ç)
    if (user.id) {
      await this.messageService.handleCallbackQuery(callbackQuery, user.id);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
    if (user.id) {
      await this.userContextManager.getOrCreateContext(userId, user.id);
    }
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback'–æ–≤ —á–µ—Ä–µ–∑ FlowEngine
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É - –∑–Ω–∞—á–∏—Ç –æ–Ω —É–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –±–æ—Ç–æ–º
    const context = await this.userContextManager.getContext(userId);
    
    console.log(`üîç Callback processing for user ${userId}:`);
    console.log(`  - Current flow: ${context?.currentFlow || 'none'}`);
    console.log(`  - Current step: ${context?.currentStep || 'none'}`);
    console.log(`  - Callback data: ${data}`);
    
    if (data) {
      console.log(`üéØ Processing callback through FlowEngine`);
      await this.flowEngine.handleIncomingCallback(userId, data);
    }
  }

  private async ensureUserExists(user: TelegramUser): Promise<void> {
    try {
      const existingUser = await this.postgresStorage.getUser(user.id);
      
      if (!existingUser) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
        console.log(`User ${user.id} not found in database - will be registered on /start command`);
      }
    } catch (error) {
      console.error(`Error checking if user exists:`, error);
    }
  }

  private async handleCommand(message: TelegramMessage): Promise<void> {
    let command = message.text?.split(' ')[0];
    const userId = message.from.id;
    const chatId = message.chat.id;

    // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ (@botname)
    if (command && command.includes('@')) {
      command = command.split('@')[0];
    }

    console.log(`Handling command: ${command} from user ${userId}`);

    switch (command) {
      case '/start':
        await this.handleStartCommandFlow(message);
        break;

      case '/menu':
        await this.handleMenuCommandFlow(message);
        break;
      
      case '/help':
        const dbUserId1 = await this.getDbUserId(chatId);
        if (dbUserId1) {
          await this.messageService.sendMessage(chatId, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ø–æ–º–æ—â—å', dbUserId1);
        }
        break;
      
      case '/confirmed':
        await this.handleConfirmedCommand(message);
        break;
      
      case '/not_confirmed':
        await this.handleNotConfirmedCommand(message);
        break;
           
      default:
        const dbUserId2 = await this.getDbUserId(chatId);
        if (dbUserId2) {
          await this.messageService.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.', dbUserId2);
        }
    }
  }

  private async handleStartCommandFlow(message: TelegramMessage): Promise<void> {
    const userId = message.from.id;
    const chatId = message.chat.id;

    console.log(`üöÄ Handling /start command via flow for user ${userId}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è dbUserId
    let existingUser = await this.postgresStorage.getUser(userId);
    
    if (!existingUser) {
      // –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫ –≤ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const topicId = await this.topicService.createTopicInAdminGroup(userId, message.from);
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è dbUserId
      const newUser = {
        telegramId: userId,
        firstName: message.from.first_name,
        lastName: message.from.last_name || '',
        username: message.from.username || '',
        registeredAt: new Date().toISOString(),
        topicId: topicId || 0
      };

      await this.postgresStorage.addUser(newUser);
      console.log(`‚úÖ New user ${userId} registered for start flow`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      existingUser = await this.postgresStorage.getUser(userId);
    }

    if (!existingUser || !existingUser.id) {
      console.error(`Cannot start flow: user ${userId} registration failed`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.userContextManager.getOrCreateContext(userId, existingUser.id);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    await this.userContextManager.setVariable(userId, '_system.currentMessage', message);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–ª–æ—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await this.flowEngine.startFlow(userId, 'start_registration');

    console.log(`‚úÖ Start flow launched for user ${userId}`);
  }

  private async handleMenuCommandFlow(message: TelegramMessage): Promise<void> {
    const userId = message.from.id;
    const chatId = message.chat.id;

    console.log(`üöÄ Handling /menu command via flow for user ${userId}`);
   
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–ª–æ—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await this.flowEngine.startFlow(userId, 'menu');

    console.log(`‚úÖ Menu flow launched for user ${userId}`);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ cron)
  async checkDelayedMessages(): Promise<void> {
    try {
      console.log('Checking delayed messages...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await this.postgresStorage.getAllUsers();
      
      for (const user of users) {
        await this.checkUserDelayedMessage(user);
      }
    } catch (error) {
      console.error('Error checking delayed messages:', error);
    }
  }

  private async checkUserDelayedMessage(user: any): Promise<void> {
    try {
      console.log(`Checking user ${user.telegramId} for delayed messages`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = user.data ? JSON.parse(user.data) : {};
      if (!userData.confirmation) {
        console.log(`No confirmation data for user ${user.telegramId}`);
        return;
      }
      
      console.log(`User ${user.telegramId} user data:`, JSON.stringify(userData, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
      if (!userData.confirmation || !userData.confirmation.tg || !userData.confirmation.vk) {
        console.log(`No confirmation for user ${user.telegramId}`);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à—ë–ª –ª–∏ —á–∞—Å —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const dateTimeStr = userData.confirmation.date_time;
      console.log(`Checking confirmation time: ${dateTimeStr}`);
      
      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ UTC —Ñ–æ—Ä–º–∞—Ç–µ ISO
      const confirmationTime = new Date(dateTimeStr);
      
      if (isNaN(confirmationTime.getTime())) {
        console.log(`Invalid date format: ${dateTimeStr}`);
        return;
      }
      
      // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
      const now = new Date();
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      const timeDiff = now.getTime() - confirmationTime.getTime();
      const oneHourInMs = 60 * 60 * 1000;
      
      console.log(`Confirmation time: ${confirmationTime.toISOString()}`);
      console.log(`Current time: ${now.toISOString()}`);
      console.log(`Time difference: ${timeDiff}ms (${Math.round(timeDiff / 1000 / 60)} minutes)`);
      console.log(`One hour in ms: ${oneHourInMs}`);
      
      if (timeDiff < oneHourInMs) {
        console.log(`Not yet an hour passed for user ${user.telegramId} (${Math.round(timeDiff / 1000 / 60)} minutes ago)`);
        return; // –ï—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª —á–∞—Å
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (userData.additional_messages && userData.additional_messages.some((msg: any) => msg.message_1)) {
        return; // –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.sendDelayedMessage(user.telegramId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const currentDateTime = new Date().toISOString();
      
      const additionalMessages = userData.additional_messages || [];
      additionalMessages.push({
        message_1: currentDateTime
      });
      
      userData.additional_messages = additionalMessages;
      await this.postgresStorage.updateUserData(user.telegramId, JSON.stringify(userData));
      console.log(`Delayed message sent to user ${user.telegramId}`);
      
    } catch (error) {
      console.error(`Error checking delayed message for user ${user.telegramId}:`, error);
    }
  }

  private async sendDelayedMessage(userId: number): Promise<void> {
    const message = `–ö—Å—Ç–∞—Ç–∏, –∞ —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å MaikLoriss –º–æ–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≥–ª—è–¥–µ—Ç—å, –Ω–æ –∏ –∑–¥–æ—Ä–æ–≤–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å? üí∞

‚ú® –•–æ—á–µ—à—å –ø–æ–∫—É–ø–∞—Ç—å –Ω–∞—à—É –∫–æ—Å–º–µ—Ç–∏–∫—É —Å –û–ì–†–û–ú–ù–û–ô —Å–∫–∏–¥–∫–æ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –∫—ç—à–±–µ–∫ –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É?
‚ú® –ê –º–æ–∂–µ—Ç, —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –±–ª–∏–∑–∫–∏–º–∏ –∏ —Å—Ç—Ä–æ–∏—Ç—å —Å –Ω–∞–º–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å?

–í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∂–¥—É—Ç —Ç–µ–±—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ! –ü–µ—Ä–µ—Ö–æ–¥–∏, –∏–∑—É—á–∞–π –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ!`;

    const dbUserId = await this.getDbUserId(userId);
    if (dbUserId) {
      await this.messageService.sendMessage(userId, message, dbUserId);
    }
  }

  private async handleAllMessages(message: TelegramMessage): Promise<void> {
    const userId = message.from.id;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await this.postgresStorage.getUser(userId);
    
    if (!user) {
      console.log(`User ${userId} not found`);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    const forwardingEnabled = await this.userContextManager.isMessageForwardingEnabled(userId);
    
    if (forwardingEnabled && user.topicId) {
      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
      await this.topicService.forwardMessageToUserTopic(userId, user.topicId, message);
      console.log(`üì¨ Message forwarded to topic for user ${userId}`);
    } else {
      console.log(`üì™ Message forwarding disabled for user ${userId} - not forwarding to topic`);
    }
  }

  private async handleVKLink(userId: number, vkLink: string): Promise<void> {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Å—ã–ª–∫—É VK
      let normalizedLink = vkLink.trim();
      if (normalizedLink.startsWith('@')) {
        normalizedLink = `https://vk.com/${normalizedLink.substring(1)}`;
      } else if (!normalizedLink.startsWith('http')) {
        normalizedLink = `https://vk.com/${normalizedLink}`;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É VK –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
      const user = await this.postgresStorage.getUser(userId);
      const userData = user?.data ? JSON.parse(user.data) : {};
      userData.vk = normalizedLink;
      delete userData.waitingForVK;
      await this.postgresStorage.updateUserData(userId, JSON.stringify(userData));
      
      console.log(`VK link saved for user ${userId}: ${normalizedLink}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
      const dbUserId = await this.getDbUserId(userId);
      if (dbUserId) {
        await this.messageService.sendMessage(userId, "–í–∂—É—Ö! üîç –ü—Ä–æ–≤–µ—Ä—è—é...", dbUserId);
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ–ø–∏–∫–∞
      if (user && user.topicId) {
        const currentDateTime = new Date().toLocaleString('ru-RU', {
          timeZone: 'Europe/Moscow',
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        });

        const topicMessage = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö

ID: ${userId}
Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ò–º—è: ${user.firstName || ''} ${user.lastName || ''}`.trim() + `
VK: ${normalizedLink}

–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${currentDateTime}`;

        const adminChatId = parseInt(this.env.ADMIN_CHAT_ID);
        await this.messageService.sendMessageToTopic(adminChatId, user.topicId, topicMessage);
        
        console.log(`Check subscription request sent to topic ${user.topicId} for user ${userId}`);
      }

    } catch (error) {
      console.error(`Error handling VK link for user ${userId}:`, error);
    }
  }

  private async handleConfirmedCommand(message: TelegramMessage): Promise<void> {
    const userId = message.from.id;
    const chatId = message.chat.id;
    const adminChatId = parseInt(this.env.ADMIN_CHAT_ID);
    const topicId = (message as any).message_thread_id;

    console.log(`Handling /confirmed command from user ${userId} in topic ${topicId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø–µ
    if (chatId !== adminChatId) {
      console.log(`/confirmed command ignored - not in admin group`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ç–æ–ø–∏–∫–µ
    if (!topicId) {
      console.log(`/confirmed command ignored - not in topic`);
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ topic_id
    const targetUserId = await this.postgresStorage.getUserIdByTopic(topicId);
    
    if (!targetUserId) {
      console.log(`No user found for topic ${topicId}`);
      return;
    }

    console.log(`Found user ${targetUserId} for topic ${topicId}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.postgresStorage.getUser(targetUserId);
    
    if (user) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ UTC
      const currentDateTime = new Date().toISOString();

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const targetUser = await this.postgresStorage.getUser(targetUserId);
      const targetUserData = targetUser?.data ? JSON.parse(targetUser.data) : {};
      targetUserData.confirmation = {
        tg: true,
        vk: true,
        date_time: currentDateTime
      };
      await this.postgresStorage.updateUserData(targetUserId, JSON.stringify(targetUserData));
      
      console.log(`User ${targetUserId} session updated with confirmation`);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const messageText = `–î–∞! –¢—ã –Ω–∞—à —á–µ–ª–æ–≤–µ–∫! –í—Å—ë –≤–µ—Ä–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å—Ç—å! 
–¢–µ–ø–µ—Ä—å —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! 

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—ä—è–≤–∏–º –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö ‚Äî —Å–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –ª–æ–≤–∏ —É–¥–∞—á—É! üçÄ`;

    const dbUserId3 = await this.getDbUserId(targetUserId);
    if (dbUserId3) {
      await this.messageService.sendMessage(targetUserId, messageText, dbUserId3);
    }
    console.log(`Confirmed message sent to user ${targetUserId}`);
  }

  private async handleNotConfirmedCommand(message: TelegramMessage): Promise<void> {
    const userId = message.from.id;
    const chatId = message.chat.id;
    const adminChatId = parseInt(this.env.ADMIN_CHAT_ID);
    const topicId = (message as any).message_thread_id;

    console.log(`Handling /not_confirmed command from user ${userId} in topic ${topicId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø–µ
    if (chatId !== adminChatId) {
      console.log(`/not_confirmed command ignored - not in admin group`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ç–æ–ø–∏–∫–µ
    if (!topicId) {
      console.log(`/not_confirmed command ignored - not in topic`);
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ topic_id
    const targetUserId = await this.postgresStorage.getUserIdByTopic(topicId);
    
    if (!targetUserId) {
      console.log(`No user found for topic ${topicId}`);
      return;
    }

    console.log(`Found user ${targetUserId} for topic ${topicId}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const messageText = `–¢–∞–∫-—Ç–∞–∫... –ß—Ç–æ-—Ç–æ –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è! üòï

–Ø –Ω–µ –≤–∏–∂—É —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –Ω–∞—à–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤ (–∏–ª–∏ –≤ –æ–±–æ–∏—Ö). 

–í–µ—Ä–Ω–∏—Å—å, —É–≤–µ—Ä—å—Å—è, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–∞—Å—å) –Ω–∞ –æ–±–∞ —Ä–µ—Å—É—Ä—Å–∞, –∏ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚ú® –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—è–π!¬ª —Å–Ω–æ–≤–∞! –ñ–¥–µ–º —Ç–µ–±—è!`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "üëâ –ù–∞—à Telegram",
            url: "https://t.me/ml_cosmetic"
          }
        ],
        [
          {
            text: "üëâ –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –í–ö",
            url: "https://vk.com/public48764292"
          }
        ],
        [
          {
            text: "‚ú®–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—è–π!",
            callback_data: "check_subscription"
          }
        ]
      ]
    };

    const dbUserId5 = await this.getDbUserId(targetUserId);
    if (dbUserId5) {
      await this.messageService.sendMessageWithKeyboard(targetUserId, messageText, keyboard, dbUserId5);
    }
    console.log(`Not confirmed message sent to user ${targetUserId}`);
  }
}
