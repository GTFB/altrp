import { MessageService } from './message-service';
import type { TelegramMessage, TelegramUser } from '../worker/bot';

export interface TopicServiceConfig {
  botToken: string;
  adminChatId: number;
  messageService: MessageService;
}

export class TopicService {
  private botToken: string;
  private adminChatId: number;
  private messageService: MessageService;

  constructor(config: TopicServiceConfig) {
    this.botToken = config.botToken;
    this.adminChatId = config.adminChatId;
    this.messageService = config.messageService;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–ø–∏–∫ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createTopicInAdminGroup(userId: number, user: TelegramUser): Promise<number | null> {
    try {
      const topicName = `${user.first_name} ${user.last_name || ''}`.trim();
      
      console.log(`Creating topic "${topicName}" in admin group ${this.adminChatId}`);

      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/createForumTopic`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.adminChatId,
          name: topicName,
          icon_color: 0x6FB9F0, // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –∏–∫–æ–Ω–∫–∏
          icon_custom_emoji_id: undefined
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Error creating topic:', errorData);
        return null;
      }

      const result = await response.json();
      const topicId = (result as any).result?.message_thread_id;
      
      if (topicId) {
        console.log(`Topic created successfully with ID: ${topicId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫
        await this.messageService.sendMessageToTopic(this.adminChatId, topicId, 
          `üëã –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n` +
          `–ò–º—è: ${user.first_name} ${user.last_name || ''}\n` +
          `Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `ID: ${userId}\n\n`
        );
        
        return topicId;
      } else {
        console.error('No topic ID in response:', result);
        return null;
      }
    } catch (error) {
      console.error('Error creating topic:', error);
      return null;
    }
  }

  /**
   * –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —Ç–æ–ø–∏–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã
   */
  async forwardMessageToUser(userId: number, message: TelegramMessage, getDbUserId: (telegramId: number) => Promise<number | null>): Promise<void> {
    try {
      const dbUserId = await getDbUserId(userId);
      if (!dbUserId) {
        console.error(`Cannot forward message: user ${userId} not found in database`);
        return;
      }

      if (message.text) {
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.messageService.sendMessage(userId, message.text, dbUserId);
      } else if (message.voice) {
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.messageService.sendVoiceToUser(userId, message.voice.file_id, message.voice.duration, dbUserId);
      } else if (message.photo && message.photo.length > 0) {
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ
        const photoFileId = message.photo?.[message.photo.length - 1]?.file_id;
        await this.messageService.sendPhotoToUser(userId, photoFileId || '', message.caption, dbUserId);
      } else if (message.document) {
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        await this.messageService.sendDocumentToUser(userId, message.document.file_id, message.document.file_name, message.caption, dbUserId);
      } 
    } catch (error) {
      console.error('Error forwarding message to user:', error);
    }
  }

  /**
   * –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ —Ç–æ–ø–∏–∫ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø–µ
   */
  async forwardMessageToUserTopic(userId: number, topicId: number, message: TelegramMessage): Promise<void> {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      let messageDescription = '';
      let fileId = '';
      
      if (message.text) {
        messageDescription = `üìù –¢–µ–∫—Å—Ç: ${message.text}`;
      } else if (message.voice) {
        messageDescription = `üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (${message.voice.duration}—Å)`;
        fileId = message.voice.file_id;
      } else if (message.photo && message.photo.length > 0) {
        messageDescription = `üì∑ –§–æ—Ç–æ`;
        fileId = message.photo?.[message.photo.length - 1]?.file_id || ''; // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
      } else if (message.document) {
        messageDescription = `üìÑ –î–æ–∫—É–º–µ–Ω—Ç: ${message.document.file_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`;
        fileId = message.document.file_id;
      } else {
        messageDescription = `üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª`;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫
      const topicMessage = `üë§ ${message.from.first_name} ${message.from.last_name || ''} (ID: ${userId})\n\n${messageDescription}`;
      
      await this.messageService.sendMessageToTopic(this.adminChatId, topicId, topicMessage);

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ
      if (fileId) {
        await this.forwardFileToTopic(topicId, fileId, message);
      }

    } catch (error) {
      console.error('Error forwarding message to user topic:', error);
    }
  }

  /**
   * –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ç–æ–ø–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã
   */
  async forwardFileToTopic(topicId: number, fileId: string, message: TelegramMessage): Promise<void> {
    try {
      let method = '';
      let body: any = {
        chat_id: this.adminChatId,
        message_thread_id: topicId,
        from_chat_id: message.chat.id,
        message_id: message.message_id
      };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      if (message.voice) {
        method = 'sendVoice';
        body = {
          chat_id: this.adminChatId,
          message_thread_id: topicId,
          voice: fileId
        };
      } else if (message.photo) {
        method = 'sendPhoto';
        body = {
          chat_id: this.adminChatId,
          message_thread_id: topicId,
          photo: fileId
        };
      } else if (message.document) {
        method = 'sendDocument';
        body = {
          chat_id: this.adminChatId,
          message_thread_id: topicId,
          document: fileId
        };
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        method = 'forwardMessage';
        body = {
          chat_id: this.adminChatId,
          message_thread_id: topicId,
          from_chat_id: message.chat.id,
          message_id: message.message_id
        };
      }

      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/${method}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body)
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Error forwarding file to topic:', errorData);
      } else {
        console.log('File forwarded to topic successfully');
      }
    } catch (error) {
      console.error('Error forwarding file to topic:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–æ–ø–∏–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã
   */
  async handleMessageFromTopic(message: TelegramMessage, getUserIdByTopic: (topicId: number) => Promise<number | null>, getDbUserId: (telegramId: number) => Promise<number | null>): Promise<void> {
    const topicId = (message as any).message_thread_id;
    
    console.log(`Processing message from topic ${topicId}`);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ topic_id
    const userId = await getUserIdByTopic(topicId!);
    
    if (userId) {
      console.log(`Found user ${userId} for topic ${topicId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/'), —Ç–æ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
      if (message.text && message.text.startsWith('/')) {
        console.log(`Command message from topic ignored: ${message.text}`);
        return;
      }
      
      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.forwardMessageToUser(userId, message, getDbUserId);
      
      // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–∞—Ö sendMessage/sendVoice/sendPhoto/sendDocument
    } else {
      console.log(`No user found for topic ${topicId}`);
    }
  }
}
