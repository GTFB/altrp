import { D1StorageService } from '../worker/d1-storage-service';

export interface SessionData {
  [key: string]: any;
}

export interface SessionServiceConfig {
  d1Storage: D1StorageService;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç D1 Database –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
 */
export class SessionService {
  private d1Storage: D1StorageService;

  constructor(config: SessionServiceConfig) {
    this.d1Storage = config.d1Storage;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private createSessionKey(userId: number, sessionType: string = 'default'): string {
    return `user:${userId}:${sessionType}`;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async setUserSession(userId: number, data: SessionData, sessionType: string = 'default'): Promise<void> {
    try {
      const sessionKey = this.createSessionKey(userId, sessionType);
      await this.d1Storage.setSession(sessionKey, data);
      console.log(`‚úÖ Session set for user ${userId}, type: ${sessionType}`);
    } catch (error) {
      console.error(`‚ùå Error setting session for user ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserSession(userId: number, sessionType: string = 'default'): Promise<SessionData | null> {
    try {
      const sessionKey = this.createSessionKey(userId, sessionType);
      const sessionData = await this.d1Storage.getSession(sessionKey);
      console.log(`üìñ Session retrieved for user ${userId}, type: ${sessionType}:`, sessionData);
      return sessionData;
    } catch (error) {
      console.error(`‚ùå Error getting session for user ${userId}:`, error);
      return null;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async deleteUserSession(userId: number, sessionType: string = 'default'): Promise<void> {
    try {
      const sessionKey = this.createSessionKey(userId, sessionType);
      await this.d1Storage.deleteSession(sessionKey);
      console.log(`üóëÔ∏è Session deleted for user ${userId}, type: ${sessionType}`);
    } catch (error) {
      console.error(`‚ùå Error deleting session for user ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ (–º–µ—Ä–∂ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏)
   */
  async updateUserSession(userId: number, updates: Partial<SessionData>, sessionType: string = 'default'): Promise<void> {
    try {
      const existingData = await this.getUserSession(userId, sessionType) || {};
      const mergedData = { ...existingData, ...updates };
      await this.setUserSession(userId, mergedData, sessionType);
      console.log(`üîÑ Session updated for user ${userId}, type: ${sessionType}`);
    } catch (error) {
      console.error(`‚ùå Error updating session for user ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async hasUserSession(userId: number, sessionType: string = 'default'): Promise<boolean> {
    try {
      const sessionData = await this.getUserSession(userId, sessionType);
      return sessionData !== null;
    } catch (error) {
      console.error(`‚ùå Error checking session for user ${userId}:`, error);
      return false;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async setUserState(userId: number, state: string, value: any = true): Promise<void> {
    await this.updateUserSession(userId, { [state]: value });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserState(userId: number, state: string): Promise<any> {
    const sessionData = await this.getUserSession(userId);
    return sessionData?.[state] || null;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async clearUserState(userId: number, state: string): Promise<void> {
    const sessionData = await this.getUserSession(userId);
    if (sessionData && sessionData[state] !== undefined) {
      delete sessionData[state];
      await this.setUserSession(userId, sessionData);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async clearAllUserSessions(userId: number): Promise<void> {
    try {
      // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–µ—Å—Å–∏–π
      await this.deleteUserSession(userId, 'default');
      await this.deleteUserSession(userId, 'flow');
      await this.deleteUserSession(userId, 'temp');
      console.log(`üßπ All sessions cleared for user ${userId}`);
    } catch (error) {
      console.error(`‚ùå Error clearing all sessions for user ${userId}:`, error);
      throw error;
    }
  }
}
