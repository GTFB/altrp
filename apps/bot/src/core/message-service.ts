import { D1StorageService } from '../worker/d1-storage-service';
import type { Message } from '../worker/d1-storage-service';
import type { TelegramMessage, TelegramCallbackQuery } from '../worker/bot';

export interface MessageServiceConfig {
  botToken: string;
  d1Storage: D1StorageService;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ Telegram –±–æ—Ç–∞
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—Ö –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export class MessageService {
  private botToken: string;
  private d1Storage: D1StorageService;

  constructor(config: MessageServiceConfig) {
    this.botToken = config.botToken;
    this.d1Storage = config.d1Storage;
  }

  // ===========================================
  // –ú–ï–¢–û–î–´ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
  // ===========================================

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async sendMessage(chatId: number, text: string, dbUserId: number): Promise<void> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'HTML'
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Error sending message:', errorData);
        return;
      }

      const result = await response.json();
      console.log('Message sent successfully:', (result as any).message_id);

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.logSentMessage(chatId, text, (result as any).message_id, dbUserId);
    } catch (error) {
      console.error('Error sending message:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
   */
  async sendMessageWithKeyboard(chatId: number, text: string, replyMarkup: any, dbUserId: number): Promise<void> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'HTML',
          reply_markup: replyMarkup
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Error sending message with keyboard:', errorData);
        return;
      }

      const result = await response.json();
      console.log('Message with keyboard sent successfully:', (result as any).message_id);

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.logSentMessage(chatId, text, (result as any).message_id, dbUserId);
    } catch (error) {
      console.error('Error sending message with keyboard:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async sendVoiceToUser(userId: number, fileId: string, duration: number, dbUserId: number): Promise<void> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendVoice`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: userId,
          voice: fileId,
          duration: duration
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Error sending voice to user:', errorData);
      } else {
        const result = await response.json();
        console.log('Voice sent to user successfully');
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.logSentVoiceMessage(userId, fileId, (result as any).message_id, duration, dbUserId);
      }
    } catch (error) {
      console.error('Error sending voice to user:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ
   */
  async sendPhotoToUser(userId: number, fileId: string, caption: string | undefined, dbUserId: number): Promise<void> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendPhoto`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: userId,
          photo: fileId,
          caption: caption || undefined
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Error sending photo to user:', errorData);
      } else {
        const result = await response.json();
        console.log('Photo sent to user successfully');
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        await this.logSentPhotoMessage(userId, fileId, (result as any).message_id, caption, dbUserId);
      }
    } catch (error) {
      console.error('Error sending photo to user:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
   */
  async sendDocumentToUser(userId: number, fileId: string, fileName: string | undefined, caption: string | undefined, dbUserId: number): Promise<void> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendDocument`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: userId,
          document: fileId,
          caption: caption || undefined
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Error sending document to user:', errorData);
      } else {
        const result = await response.json();
        console.log('Document sent to user successfully');
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        await this.logSentDocumentMessage(userId, fileId, (result as any).message_id, fileName, caption, dbUserId);
      }
    } catch (error) {
      console.error('Error sending document to user:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫
   */
  async sendMessageToTopic(chatId: number, topicId: number, text: string): Promise<void> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          message_thread_id: topicId,
          text: text,
          parse_mode: 'HTML'
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Error sending message to topic:', errorData);
      }
    } catch (error) {
      console.error('Error sending message to topic:', error);
    }
  }

  /**
   * –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query
   */
  async answerCallbackQuery(callbackQueryId: string): Promise<void> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/answerCallbackQuery`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          callback_query_id: callbackQueryId
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Error answering callback query:', errorData);
      } else {
        console.log('Callback query answered successfully');
      }
    } catch (error) {
      console.error('Error answering callback query:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query: –ª–æ–≥–∏—Ä—É–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–µ–≥–æ
   */
  async handleCallbackQuery(callbackQuery: any, dbUserId: number): Promise<void> {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º callback query
      await this.logCallbackQuery(callbackQuery, dbUserId);
      
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      await this.answerCallbackQuery(callbackQuery.id);
      
      console.log(`‚úÖ Callback query handled successfully for user with DB ID: ${dbUserId}`);
    } catch (error) {
      console.error('‚ùå Error handling callback query:', error);
      throw error;
    }
  }

  // ===========================================
  // –ú–ï–¢–û–î–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô
  // ===========================================

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async logMessage(message: TelegramMessage, direction: 'incoming' | 'outgoing', dbUserId: number): Promise<void> {
    try {
      console.log(`üìù Logging ${direction} message from user ${message.from.id} (DB ID: ${dbUserId})`);
      
      const messageLog = {
        userId: dbUserId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users, –∞ –Ω–µ Telegram ID
        messageType: this.getMessageType(message),
        direction,
        content: message.text || '',
        telegramMessageId: message.message_id,
        fileId: message.voice?.file_id || message.photo?.[0]?.file_id || message.document?.file_id || '',
        fileName: message.document?.file_name || '',
        caption: message.caption || '',
        createdAt: new Date().toISOString()
      };

      console.log(`üìù Message log object:`, JSON.stringify(messageLog, null, 2));
      
      const result = await this.d1Storage.addMessage(messageLog);
      console.log(`‚úÖ Message logged successfully with ID: ${result}`);
    } catch (error) {
      console.error('‚ùå Error logging message:', error);
      console.error('Error details:', error);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç callback query
   */
  async logCallbackQuery(callbackQuery: TelegramCallbackQuery, dbUserId: number): Promise<void> {
    try {
      console.log(`üîò Logging callback query from user ${callbackQuery.from.id} (DB ID: ${dbUserId}): ${callbackQuery.data}`);
      
      const messageLog = {
        userId: dbUserId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users, –∞ –Ω–µ Telegram ID
        messageType: 'user_callback' as const,
        direction: 'incoming' as const,
        content: callbackQuery.data || '',
        telegramMessageId: callbackQuery.message?.message_id || 0,
        callbackData: callbackQuery.data || '',
        createdAt: new Date().toISOString()
      };

      console.log(`üîò Callback log object:`, JSON.stringify(messageLog, null, 2));
      
      const result = await this.d1Storage.addMessage(messageLog);
      console.log(`‚úÖ Callback logged successfully with ID: ${result}`);
    } catch (error) {
      console.error('‚ùå Error logging callback query:', error);
      console.error('Error details:', error);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async logSentMessage(chatId: number, text: string, messageId: number, dbUserId: number): Promise<void> {
    try {
      console.log(`ü§ñ Logging bot message to user ${chatId} (DB ID: ${dbUserId})`);
      
      const messageLog = {
        userId: dbUserId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users, –∞ –Ω–µ Telegram ID
        messageType: 'bot_text' as const,
        direction: 'outgoing' as const,
        content: text,
        telegramMessageId: messageId,
        createdAt: new Date().toISOString()
      };

      console.log(`ü§ñ Bot message log object:`, JSON.stringify(messageLog, null, 2));
      
      const result = await this.d1Storage.addMessage(messageLog);
      console.log(`‚úÖ Bot message logged successfully with ID: ${result} for user ${chatId}: ${text.substring(0, 50)}...`);
    } catch (error) {
      console.error('‚ùå Error logging sent message:', error);
      console.error('Error details:', error);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async logSentVoiceMessage(userId: number, fileId: string, messageId: number, duration: number, dbUserId: number): Promise<void> {
    try {
      console.log(`üé§ Logging bot voice message to user ${userId} (DB ID: ${dbUserId})`);
      
      const messageLog = {
        userId: dbUserId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users, –∞ –Ω–µ Telegram ID
        messageType: 'bot_voice' as const,
        direction: 'outgoing' as const,
        content: `Voice message (${duration}s)`,
        telegramMessageId: messageId,
        fileId: fileId,
        createdAt: new Date().toISOString()
      };

      console.log(`üé§ Bot voice log object:`, JSON.stringify(messageLog, null, 2));
      
      const result = await this.d1Storage.addMessage(messageLog);
      console.log(`‚úÖ Bot voice message logged successfully with ID: ${result} for user ${userId}`);
    } catch (error) {
      console.error('‚ùå Error logging sent voice message:', error);
      console.error('Error details:', error);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
   */
  async logSentPhotoMessage(userId: number, fileId: string, messageId: number, caption: string | undefined, dbUserId: number): Promise<void> {
    try {
      console.log(`üì∑ Logging bot photo message to user ${userId} (DB ID: ${dbUserId})`);
      
      const messageLog = {
        userId: dbUserId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users, –∞ –Ω–µ Telegram ID
        messageType: 'bot_photo' as const,
        direction: 'outgoing' as const,
        content: caption || 'Photo',
        telegramMessageId: messageId,
        fileId: fileId,
        caption: caption || '',
        createdAt: new Date().toISOString()
      };

      console.log(`üì∑ Bot photo log object:`, JSON.stringify(messageLog, null, 2));
      
      const result = await this.d1Storage.addMessage(messageLog);
      console.log(`‚úÖ Bot photo message logged successfully with ID: ${result} for user ${userId}`);
    } catch (error) {
      console.error('‚ùå Error logging sent photo message:', error);
      console.error('Error details:', error);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
   */
  async logSentDocumentMessage(userId: number, fileId: string, messageId: number, fileName: string | undefined, caption: string | undefined, dbUserId: number): Promise<void> {
    try {
      console.log(`üìÑ Logging bot document message to user ${userId} (DB ID: ${dbUserId})`);
      
      const messageLog = {
        userId: dbUserId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users, –∞ –Ω–µ Telegram ID
        messageType: 'bot_document' as const,
        direction: 'outgoing' as const,
        content: caption || `Document: ${fileName || 'Unknown'}`,
        telegramMessageId: messageId,
        fileId: fileId,
        fileName: fileName || '',
        caption: caption || '',
        createdAt: new Date().toISOString()
      };

      console.log(`üìÑ Bot document log object:`, JSON.stringify(messageLog, null, 2));
      
      const result = await this.d1Storage.addMessage(messageLog);
      console.log(`‚úÖ Bot document message logged successfully with ID: ${result} for user ${userId}`);
    } catch (error) {
      console.error('‚ùå Error logging sent document message:', error);
      console.error('Error details:', error);
    }
  }

  // ===========================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ===========================================

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private getMessageType(message: TelegramMessage): 'user_text' | 'user_voice' | 'user_photo' | 'user_document' {
    if (message.text) return 'user_text';
    if (message.voice) return 'user_voice';
    if (message.photo) return 'user_photo';
    if (message.document) return 'user_document';
    return 'user_text';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
   */
  private getBotMessageType(message: TelegramMessage): 'bot_text' | 'bot_voice' | 'bot_photo' | 'bot_document' {
    if (message.text) return 'bot_text';
    if (message.voice) return 'bot_voice';
    if (message.photo) return 'bot_photo';
    if (message.document) return 'bot_document';
    return 'bot_text';
  }
}
